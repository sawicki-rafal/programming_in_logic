

simpleExpression([X], X).
simpleExpression(L, X + Y) :-
    append([L|Left], [R|Right], L),
    simpleExpression([L|Left], X),
    simpleExpression([R|Right], Y).
simpleExpression(L, X * Y) :-
    append([L|Left], [R|Right], L),
    simpleExpression([L|Left], X),
    simpleExpression([R|Right], Y).

simpleExpression(L, X - Y) :-
    append([L|Left], [R|Right], L),
    simpleExpression([L|Left], X),
    simpleExpression([R|Right], Y).

simpleExpression(L, X / Y) :-
    append([L|Left], [R|Right], L),
    simpleExpression([L|Left], X),
    simpleExpression([R|Right], Y),
    Y=\=0.



expressionParenthesized(X) -->
    [X].
expressionParenthesized(X + Y) -->
    ['('],
    expressionParenthesized(X),
    [+],
    expressionParenthesized(Y),
    [')'].

expressionParenthesized(X - Y) -->
    ['('],
    expressionParenthesized(X),
    [-],
    expressionParenthesized(Y),
    [')'].

expressionParenthesized(X / Y) -->
    ['('],
    expressionParenthesized(X),
    [/],
    expressionParenthesized(Y),
    [')'].



expressionParenthesized(X * Y) -->
    ['('],
    expressionParenthesized(X),
    [*],
    expressionParenthesized(Y),
    [')'].




expr(Z) --> num(Z).
expr(Z) --> num(X), [+], expr(Y), {Z is X+Y}.
expr(Z) --> num(X), [-], expr(Y), {Z is X-Y}.
expr(Z) --> num(X), [*], expr(Y), {Z is X*Y}.
expr(Z) --> num(X), [/], expr(Y), {Y=\=0,Z is X/Y}.

expr(Z) --> ['('],expr(Y),[')'],[+],expr(X), {Z is X+Y}.
expr(Z) --> ['('],expr(Y),[')'],[-],expr(X), {Z is Y-X}.
expr(Z) --> ['('],expr(Y),[')'],[*],expr(X), {Z is X*Y}.
expr(Z) --> ['('],expr(Y),[')'],[/],expr(X), {X=\=0,Z is Y/X}.
expr(Z) --> ['('],expr(Y),[')'],{Z is Y}.


num(D) --> [D], {number(D)}.

expressionValue(L, V) :- expr(V, L, []).

wyrazenie(L, V, Expr):-
    simpleExpression(L, Expr), expressionParenthesized(Expr, Parenthesized,[]),
    expressionValue( Parenthesized,V).
